// Java Program to Implement Encryption Class 

package Exploit.org; 

// Importing required classes 
import java.io.FileInputStream; 
import java.io.IOException; 
import java.security.GeneralSecurityException; 
import java.util.Properties; 
import javax.crypto.spec.SecretKeySpec; 

// Class 
public class Encryption { 

	// Main driver method 
	public static void main(String[] args) 
		throws IOException, GeneralSecurityException 
	{ 
		Properties properties = new Properties(); 
		FileInputStream fileInputStream 
			= new FileInputStream("src/config.properties"); 
		properties.load(fileInputStream); 
		String password 
			= properties.getProperty("Password"); 

		if (password == null) { 
			throw new IllegalArgumentException( 
				"Parameter is not present in configuration file"); 
		} 

		byte[] salt = new String("622836429").getBytes(); 
		int iterationCount = 10000; 
		int keyLength = 128; 
		
		secretKey object = new secretKey(); 
		SecretKeySpec key = object.generateSecretKey( 
			password.toCharArray(), salt, iterationCount, 
			keyLength); 

		String originalPassword = password; 
		System.out.println("Original password: "
						+ originalPassword); 
		String encryptedPassword 
			= object.encrypt(originalPassword, key); 
		
		System.out.println("Encrypted password: "
						+ encryptedPassword); 
	} 
}


// Java Program to Illustrate Class that Contains 
  
package Exploit.org; 
  
// Importing required classes  
import java.io.UnsupportedEncodingException; 
import java.security.AlgorithmParameters; 
import java.security.GeneralSecurityException; 
import java.security.NoSuchAlgorithmException; 
import java.security.spec.InvalidKeySpecException; 
import java.util.Base64; 
import javax.crypto.Cipher; 
import javax.crypto.SecretKey; 
import javax.crypto.SecretKeyFactory; 
import javax.crypto.spec.IvParameterSpec; 
import javax.crypto.spec.PBEKeySpec; 
import javax.crypto.spec.SecretKeySpec; 
  
// Class  
public class secretKey { 
    
    // Method   
    public SecretKeySpec 
    generateSecretKey(char[] password, byte[] salt, 
                      int iterationCount, int keyLength) 
        throws NoSuchAlgorithmException, 
               InvalidKeySpecException 
    { 
        SecretKeyFactory keyFactory 
            = SecretKeyFactory.getInstance( 
                "PBKDF2WithHmacSHA512"); 
        PBEKeySpec keySpec = new PBEKeySpec( 
            password, salt, iterationCount, keyLength); 
        SecretKey tempKey 
            = keyFactory.generateSecret(keySpec); 
        return new SecretKeySpec(tempKey.getEncoded(), 
                                 "AES"); 
    } 
  
    // Method  
    private String base64Encoder(byte[] bytes) 
    { 
        return Base64.getEncoder().encodeToString(bytes); 
    } 
  
    // Method  
    public String encrypt(String dataToEncrypt, 
                          SecretKeySpec key) 
        throws GeneralSecurityException, 
               UnsupportedEncodingException 
    { 
        Cipher pbeCipher 
            = Cipher.getInstance("AES/CBC/PKCS5Padding"); 
        pbeCipher.init(Cipher.ENCRYPT_MODE, key); 
          
                 AlgorithmParameters parameters 
            = pbeCipher.getParameters(); 
          
                 IvParameterSpec ivParameterSpec 
            = parameters.getParameterSpec( 
                IvParameterSpec.class); 
          
                 byte[] cryptoText = pbeCipher.doFinal( 
            dataToEncrypt.getBytes("UTF-8")); 
          
                 byte[] iv = ivParameterSpec.getIV(); 
        return base64Encoder(iv) + ":"
            + base64Encoder(cryptoText); 
    } 
}
